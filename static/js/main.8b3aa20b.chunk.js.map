{"version":3,"sources":["abhishek.jpg","Image.js","Button.js","Links.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Image","className","src","logo","alt","Button","props","name","icon","href","type","target","Links","class","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,sC,8KCiB5BC,EAdD,WACZ,OACE,6BACE,yBAAKC,UAAU,8BACb,yBACEC,IAAKC,IACLF,UAAU,4CACVG,IAAI,gBCSCC,EAjBA,SAACC,GAAW,IACjBC,EAAqBD,EAArBC,KAAMC,EAAeF,EAAfE,KAAMC,EAASH,EAATG,KAEpB,OACE,oCACE,uBACEC,KAAK,SACLT,UAAU,qCACVQ,KAAMA,EACNE,OAAO,SAEP,uBAAGV,UAAWO,IANhB,IAM4BD,KCVnB,SAASK,IACtB,OACE,yBAAKX,UAAU,6BACb,kBAAC,EAAD,CACES,KAAK,SACLG,MAAM,iDACNN,KAAK,gBACLC,KAAK,gBACLC,KAAK,+BAEP,kBAAC,EAAD,CACEC,KAAK,SACLG,MAAM,iDACNN,KAAK,iBACLC,KAAK,mBACLC,KAAK,+CAEP,kBAAC,EAAD,CACEC,KAAK,SACLG,MAAM,iDACNN,KAAK,kBACLC,KAAK,mBACLC,KAAK,+CAEP,kBAAC,EAAD,CACEC,KAAK,SACLG,MAAM,iDACNN,KAAK,SACLC,KAAK,gBACLC,KAAK,oCAEP,kBAAC,EAAD,CACEC,KAAK,SACLG,MAAM,iDACNN,KAAK,YACLC,KAAK,mBACLC,KAAK,kCAEP,kBAAC,EAAD,CACEC,KAAK,SACLG,MAAM,iDACNN,KAAK,WACLC,KAAK,kBACLC,KAAK,wCAEP,kBAAC,EAAD,CACEC,KAAK,SACLG,MAAM,iDACNN,KAAK,aACLC,KAAK,oBACLC,KAAK,6CCtCEK,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAACF,EAAD,QCEcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8b3aa20b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/abhishek.f8fb67e1.jpg\";","import React from \"react\";\r\nimport logo from \"./abhishek.jpg\";\r\n\r\nconst Image = () => {\r\n  return (\r\n    <div>\r\n      <div className=\"container text-center mt-5\">\r\n        <img\r\n          src={logo}\r\n          className=\"rounded-circle main-image image-thumbnail\"\r\n          alt=\"abhishek\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Image;\r\n","import React from \"react\";\r\n\r\nconst Button = (props) => {\r\n  const { name, icon, href } = props;\r\n\r\n  return (\r\n    <>\r\n      <a\r\n        type=\"button\"\r\n        className=\"btn btn-secondary btn-lg btn-block\"\r\n        href={href}\r\n        target=\"blank\"\r\n      >\r\n        <i className={icon}></i> {name}\r\n      </a>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport Button from \"./Button\";\r\n\r\nexport default function Links() {\r\n  return (\r\n    <div className=\"col-md-6 offset-md-3 my-5\">\r\n      <Button\r\n        type=\"button\"\r\n        class=\"btn bnt-outline btn-secondary btn-lg btn-block\"\r\n        name=\"ProCoding.org\"\r\n        icon=\"fab fa-chrome\"\r\n        href=\"https://www.procoding.org/\"\r\n      />\r\n      <Button\r\n        type=\"button\"\r\n        class=\"btn bnt-outline btn-secondary btn-lg btn-block\"\r\n        name=\"abhi_erroprone\"\r\n        icon=\"fab fa-instagram\"\r\n        href=\"https://www.instagram.com/abhi_errorprone/\"\r\n      />\r\n      <Button\r\n        type=\"button\"\r\n        class=\"btn bnt-outline btn-secondary btn-lg btn-block\"\r\n        name=\"yumm_abhi_shake\"\r\n        icon=\"fab fa-instagram\"\r\n        href=\"https://www.instagram.com/yumm_abhi_shake/\"\r\n      />\r\n      <Button\r\n        type=\"button\"\r\n        class=\"btn bnt-outline btn-secondary btn-lg btn-block\"\r\n        name=\"GitHub\"\r\n        icon=\"fab fa-github\"\r\n        href=\"https://www.github.com/akabhi5/\"\r\n      />\r\n      <Button\r\n        type=\"button\"\r\n        class=\"btn bnt-outline btn-secondary btn-lg btn-block\"\r\n        name=\"Bitbucket\"\r\n        icon=\"fab fa-bitbucket\"\r\n        href=\"https://bitbucket.org/akabhi/\"\r\n      />\r\n      <Button\r\n        type=\"button\"\r\n        class=\"btn bnt-outline btn-secondary btn-lg btn-block\"\r\n        name=\"Linkedin\"\r\n        icon=\"fab fa-linkedin\"\r\n        href=\"https://www.linkedin.com/in/akabhi/\"\r\n      />\r\n      <Button\r\n        type=\"button\"\r\n        class=\"btn bnt-outline btn-secondary btn-lg btn-block\"\r\n        name=\"HackerRank\"\r\n        icon=\"fab fa-hackerrank\"\r\n        href=\"https://www.hackerrank.com/abhishekk580\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Image from \"./Image\";\nimport Links from \"./Links\";\n\nfunction App() {\n  return (\n    <div>\n      <Image />\n      <Links />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}